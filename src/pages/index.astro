---
import WeatherToday from "../components/WeatherToday.astro";
import Layout from "../layouts/Layout.astro";
import Form from "../components/Form.astro";
import HourlyForecast from "../components/HourlyForecast.astro";
import DailyForecast from "../components/DailyForecast.astro";
import LatDialog from "../components/LatDialog.astro";
import { queryApi } from "../util/weather-fetch";
// import type { WeatherApiSuccess, WeatherApiError, WeatherApiParams, WeatherApiResponse } from '../env.d.ts'

let latitude: number = 53.5501;
let longitude: number = -113.4687;
if (Astro.request.method === "POST") {
	try {
		const data = await Astro.request.formData();
		const longitudeResponse: FormDataEntryValue | null = data.get("longitude");
		const latitudeResponse: FormDataEntryValue | null = data.get("latitude");

		if (longitudeResponse == null || latitudeResponse == null) {
			throw new Error("Error: Received invalid longitude or latitude.");
		} else {
			longitude = parseFloat(longitudeResponse.toString());
			latitude = parseFloat(latitudeResponse.toString());
		}

	} catch (error) {
		console.log("Error: ", error);
	}
}

const current= "temperature_2m,apparent_temperature,is_day,precipitation,rain,showers,snowfall,cloud_cover";
const hourly = "temperature_2m,apparent_temperature,precipitation,rain,showers,snowfall,snow_depth,weather_code";
const daily = "weather_code,sunrise,sunset,daylight_duration,sunshine_duration,uv_index_max,uv_index_clear_sky_max,wind_speed_10m_max,wind_gusts_10m_max";
const params = {
    latitude: [latitude],
    longitude: [longitude],
    current: current,
    hourly: hourly,
    daily: daily
};



type WeatherApiParams = {
        latitude: Array<number>;
        longitude: Array<number>;
        current: string;
        hourly: string;
        daily: string;
    }


type WeatherApiSuccess = {
        current: {
            time: Date;
            temperature2m: number;
            apparentTemperature: number;
        };
        hourly: {
            time: Date[];
            temperature2m: Float32Array;
            apparentTemperature: Float32Array;
        };
        daily: {
            time: Date[];
            weatherCode: Float32Array;
            sunrise: null;
            sunset: null;
        };
    }
type WeatherApiError = {
        error: string;
}
type WeatherApiResponse = WeatherApiSuccess | WeatherApiError;
let fetchResult: WeatherApiResponse = await queryApi(params);
let fetchData: WeatherApiSuccess;
let fetchError: WeatherApiError;

if ("error" in fetchResult){
	fetchError = fetchResult
} else {
	fetchData = fetchResult;
}

// Helper function to get type name
function getTypeDescription(obj: any): string {


    if (obj === null) return 'null';
    if (Array.isArray(obj)) return 'Array';
    if (obj instanceof Float32Array) return 'Float32Array';
    if (obj instanceof Date) return 'Date';
    return typeof obj;
}

// console.log("Type name:", getTypeDescription(fetchResult));
// console.log("Object structure:", Object.keys(fetchResult));
// console.log("FETCH RESULT: ", fetchResult);

// console.log(await queryApi(params))

const mockTimes = [
	"2024-12-28T00:00:00.000Z",
	"2024-12-28T01:00:00.000Z",
	"2024-12-28T02:00:00.000Z",
	"2024-12-28T03:00:00.000Z",
	"2024-12-28T04:00:00.000Z",
	"2024-12-28T05:00:00.000Z",
	"2024-12-28T06:00:00.000Z",
	"2024-12-28T07:00:00.000Z",
	"2024-12-28T08:00:00.000Z",
	"2024-12-28T09:00:00.000Z",
	"2024-12-28T10:00:00.000Z",
	"2024-12-28T11:00:00.000Z",
	"2024-12-28T12:00:00.000Z",
	"2024-12-28T13:00:00.000Z",
	"2024-12-28T14:00:00.000Z",
	"2024-12-28T15:00:00.000Z",
	"2024-12-28T16:00:00.000Z",
	"2024-12-28T17:00:00.000Z",
	"2024-12-28T18:00:00.000Z",
	"2024-12-28T19:00:00.000Z",
	"2024-12-28T20:00:00.000Z",
	"2024-12-28T21:00:00.000Z",
	"2024-12-28T22:00:00.000Z",
	"2024-12-28T23:00:00.000Z",
	"2024-12-29T00:00:00.000Z",
	"2024-12-29T01:00:00.000Z",
	"2024-12-29T02:00:00.000Z",
	"2024-12-29T03:00:00.000Z",
	"2024-12-29T04:00:00.000Z",
	"2024-12-29T05:00:00.000Z",
	"2024-12-29T06:00:00.000Z",
	"2024-12-29T07:00:00.000Z",
	"2024-12-29T08:00:00.000Z",
	"2024-12-29T09:00:00.000Z",
	"2024-12-29T10:00:00.000Z",
	"2024-12-29T11:00:00.000Z",
	"2024-12-29T12:00:00.000Z",
	"2024-12-29T13:00:00.000Z",
	"2024-12-29T14:00:00.000Z",
	"2024-12-29T15:00:00.000Z",
	"2024-12-29T16:00:00.000Z",
	"2024-12-29T17:00:00.000Z",
	"2024-12-29T18:00:00.000Z",
	"2024-12-29T19:00:00.000Z",
	"2024-12-29T20:00:00.000Z",
	"2024-12-29T21:00:00.000Z",
	"2024-12-29T22:00:00.000Z",
	"2024-12-29T23:00:00.000Z",
	"2024-12-30T00:00:00.000Z",
	"2024-12-30T01:00:00.000Z",
	"2024-12-30T02:00:00.000Z",
	"2024-12-30T03:00:00.000Z",
	"2024-12-30T04:00:00.000Z",
	"2024-12-30T05:00:00.000Z",
	"2024-12-30T06:00:00.000Z",
	"2024-12-30T07:00:00.000Z",
	"2024-12-30T08:00:00.000Z",
	"2024-12-30T09:00:00.000Z",
	"2024-12-30T10:00:00.000Z",
	"2024-12-30T11:00:00.000Z",
	"2024-12-30T12:00:00.000Z",
	"2024-12-30T13:00:00.000Z",
	"2024-12-30T14:00:00.000Z",
	"2024-12-30T15:00:00.000Z",
	"2024-12-30T16:00:00.000Z",
	"2024-12-30T17:00:00.000Z",
	"2024-12-30T18:00:00.000Z",
	"2024-12-30T19:00:00.000Z",
	"2024-12-30T20:00:00.000Z",
	"2024-12-30T21:00:00.000Z",
	"2024-12-30T22:00:00.000Z",
	"2024-12-30T23:00:00.000Z",
	"2024-12-31T00:00:00.000Z",
	"2024-12-31T01:00:00.000Z",
	"2024-12-31T02:00:00.000Z",
	"2024-12-31T03:00:00.000Z",
	"2024-12-31T04:00:00.000Z",
	"2024-12-31T05:00:00.000Z",
	"2024-12-31T06:00:00.000Z",
	"2024-12-31T07:00:00.000Z",
	"2024-12-31T08:00:00.000Z",
	"2024-12-31T09:00:00.000Z",
	"2024-12-31T10:00:00.000Z",
	"2024-12-31T11:00:00.000Z",
	"2024-12-31T12:00:00.000Z",
	"2024-12-31T13:00:00.000Z",
	"2024-12-31T14:00:00.000Z",
	"2024-12-31T15:00:00.000Z",
	"2024-12-31T16:00:00.000Z",
	"2024-12-31T17:00:00.000Z",
	"2024-12-31T18:00:00.000Z",
	"2024-12-31T19:00:00.000Z",
	"2024-12-31T20:00:00.000Z",
	"2024-12-31T21:00:00.000Z",
	"2024-12-31T22:00:00.000Z",
	"2024-12-31T23:00:00.000Z",
	"2025-01-01T00:00:00.000Z",
	"2025-01-01T01:00:00.000Z",
	"2025-01-01T02:00:00.000Z",
	"2025-01-01T03:00:00.000Z",
];

const hourlyApparentTemperatures = [
	-3.5697734355926514, -3.961158275604248, -4.337305545806885,
	-4.538272857666016, -4.900454044342041, -5.048620700836182,
	-5.579355239868164, -5.960006237030029, -6.450774192810059,
	-7.329412460327148, -8.113814353942871, -8.721675872802734,
	-9.142428398132324, -9.33680534362793, -9.603302001953125,
	-9.982488632202148, -10.257862091064453, -10.45571517944336,
	-9.756891250610352, -8.798531532287598, -8.194802284240723,
	-7.732898712158203, -7.418929576873779, -7.406092643737793,
	-8.113162994384766, -8.814043045043945, -9.218608856201172,
	-9.521210670471191, -9.846763610839844, -10.171804428100586,
	-10.480761528015137, -10.756977081298828, -11.087080001831055,
	-11.292604446411133, -11.612178802490234, -12.246936798095703,
	-13.179765701293945, -13.789214134216309, -14.075379371643066,
	-14.460762023925781, -14.666427612304688, -15.135578155517578,
	-15.426822662353516, -15.206786155700684, -13.768813133239746,
	-12.44878101348877, -11.808765411376953, -11.730997085571289,
	-12.700360298156738, -13.578598976135254, -13.760939598083496,
	-13.727012634277344, -13.530755996704102, -13.245684623718262,
	-13.084577560424805, -13.296683311462402, -13.135539054870605,
	-12.6285982131958, -12.228256225585938, -12.043901443481445,
	-12.345573425292969, -12.841653823852539, -13.325852394104004,
	-13.703598022460938, -13.93114948272705, -14.072074890136719,
	-13.827669143676758, -13.725704193115234, -13.740808486938477,
	-13.899382591247559, -13.971301078796387, -14.171789169311523,
	-14.784818649291992, -15.417471885681152, -15.980318069458008,
	-16.6053466796875, -17.154701232910156, -17.64523696899414,
	-18.020763397216797, -18.383235931396484, -18.73041534423828,
	-18.91561508178711, -19.00537872314453, -19.00537872314453,
	-18.969615936279297, -19.022096633911133, -18.98727798461914,
	-19.062393188476562, -19.06509780883789, -19.06509780883789,
	-18.735443115234375, -18.165447235107422, -17.48375701904297,
	-17.27817153930664, -17.3079833984375, -17.48044204711914,
	-18.016448974609375, -18.445358276367188, -18.920982360839844,
	-19.359142303466797,
];

const dailyMockTimes = [
	"2024-12-28T00:00:00.000Z",
	"2024-12-29T00:00:00.000Z",
	"2024-12-30T00:00:00.000Z",
	"2024-12-31T00:00:00.000Z",
	"2025-01-01T00:00:00.000Z",
	"2025-01-02T00:00:00.000Z",
	"2025-01-03T00:00:00.000Z",
];

const dailyMockWeatherCodes = [3, 2, 3, 3, 3, 71, 71];

const dailyMockSunrise = null;
const dailyMockSunset = null;
---

<Layout>
	<LatDialog  longitude={longitude} latitude={latitude} />
	<Form />
	{fetchData && (
		<>
			<WeatherToday
				currentTime={new Date(fetchData.current.time)}
				currentTemperature2m={fetchData.current.temperature2m}
				currentApparentTemperature={fetchData.current.apparentTemperature}
			/>
			<HourlyForecast
				hourlyTime={fetchData.hourly.time.map((time) => new Date(time))}
				hourlyApparentTemperatures={fetchData.hourly.apparentTemperature}
			/>
			<DailyForecast
				dailyTime={fetchData.daily.time.map((time) => new Date(time))}
				dailyWeatherCodes={fetchData.daily.weatherCode}
			/>
		</>
	)}
</Layout>
